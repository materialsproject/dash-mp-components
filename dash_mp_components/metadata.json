{
    "src/lib/components/JsonView.react.js": {
        "description": "",
        "displayName": "JsonView",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "src": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": ""
            },
            "name": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "bool"
                        },
                        {
                            "name": "string"
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "theme": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "style": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": ""
            },
            "iconStyle": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "indentWidth": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "collapsed": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "bool"
                        },
                        {
                            "name": "number"
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "collapseStringsAfterLength": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "bool"
                        },
                        {
                            "name": "number"
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "groupArraysAfterLength": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "enableClipboard": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "displayObjectSize": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "displayDataTypes": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "defaultValue": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": ""
            },
            "sortKeys": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "validationMessage": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            }
        }
    },
    "src/lib/components/MatSidebar.react.js": {
        "description": "Material navigation bar",
        "displayName": "MatSidebar",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks."
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
            },
            "currentApp": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID of the current selected app"
            },
            "appId": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "This is a read-only prop that dash callback can subscribe to"
            },
            "layout": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'vertical'",
                            "computed": false
                        },
                        {
                            "value": "'horizontal'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "The layout of the sidebar"
            }
        }
    },
    "src/lib/components/crystal-toolkit/CameraContextProvider.react.js": {
        "description": "Use this component to synchronize the camera of multiple\n SimpleSceneComponent",
        "displayName": "CameraContextProvider",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "children": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.any"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "src/lib/components/crystal-toolkit/CrystalToolkitScene.react.js": {
        "description": "",
        "displayName": "CrystalToolkitScene",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "data": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Simple3DScene JSON, the easiest way to generate this is to use the Scene class\nin crystal_toolkit.core.scene and its to_json method."
            },
            "settings": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Options used for generating scene.\nSupported options and their defaults are given as follows:\n{\n   antialias: true, // set to false to improve performance\n   renderer: 'webgl', // 'svg' also an option, used for unit testing\n   transparentBackground: false, // transparent background\n   background: '#ffffff', // background color if not transparent,\n   sphereSegments: 32, // decrease to improve performance\n   cylinderSegments: 16, // decrease to improve performance\n   staticScene: true, // disable if animation required\n   defaultZoom: 1, // 1 will zoom to fit object exactly, <1 will add padding between object and box bounds\n   zoomToFit2D: false // if true, will zoom to fit object only along the X and Y axes (not Z)\n   extractAxis: false // will remove the axis from the main scene\n   isMultiSelectionEnabled: false // allow to use shift to select,\n   secondaryObjectView: true // show the selected object in a detail view\n   animation: 'play' | 'slider' | 'none' // choose which style of animation is use\n}\nThere are several additional options used for debugging and testing,\nplease consult the source code directly for these."
            },
            "toggleVisibility": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Hide/show nodes in scene by its name (key), value is 1 to show the node\nand 0 to hide it."
            },
            "imageRequest": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Set to trigger a screenshot or scene download.\nMust be an object with the following structure:\n{\n   \"filetype\": \"png\" // the image format (\"png\", \"dae\")\n}\nPassing this prop as an object ensures that\nnew requests are triggered any time the prop\nis set."
            },
            "imageData": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "THIS PROP IS SET AUTOMATICALLY\nData string for the image generated by imageRequest\nThis string can be downloaded as the filetype specified in your imageRequest object"
            },
            "imageDataTimestamp": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.number"
                },
                "required": false,
                "description": "THIS PROP IS SET AUTOMATICALLY\nDate string that represents the time imageData was set.\nThis is to prevent race conditions between imageRequest and imageData\nwhen being used in dash callbacks."
            },
            "setProps": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "selectedObject": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.array"
                },
                "required": false,
                "description": "This points to the last clicked objects. Use it in your dash callback\nto know which objects are currently selected in the scene"
            },
            "sceneSize": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.oneOfType([PropTypes.number, PropTypes.string])"
                },
                "required": false,
                "description": "Width / Height of the displayed component"
            },
            "axisView": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "Where is the axis displayed ( 'NW' / 'NE' / 'SE' / 'SW' / 'HIDDEN' )"
            },
            "inletSize": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.number"
                },
                "required": false,
                "description": "Size of the axis view"
            },
            "inletPadding": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.number"
                },
                "required": false,
                "description": "Padding of the axis view"
            },
            "debug": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.bool"
                },
                "required": false,
                "description": "Display a debug view"
            },
            "animation": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "Animation type"
            },
            "currentCameraState": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "THIS PROP IS SET AUTOMATICALLY\nObject that maintains the current state of the camera.\ne.g.\n{\n  position: {x: 0, y: 0, z: 0},\n  quarternion: {x: 0, y: 0, z: 0, w: 0},\n  zoom: 1,\n  setByComponentId: \"1\",\n  following: true\n}"
            },
            "customCameraState": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Object for setting the scene to a custom camera state.\nWhen modified, the camera will update to new custom state.\ne.g.\n{\n  position: {x: 0, y: 0, z: 0},\n  quarternion: {x: 0, y: 0, z: 0, w: 0}, (optional)\n  zoom: 1 (optional)\n}"
            }
        }
    },
    "src/lib/components/crystal-toolkit/Download.react.js": {
        "description": "",
        "displayName": "Download",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks."
            },
            "data": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "When set, a download is invoked using a Blob.\nAccepts an object with the following structure:\n      {\n        filename: string;\n        content: any;\n        isBase64: boolean (optional);\n        isDataURL: boolean (optional);\n        mimeType: string (optional, default: 'text/plan');\n      }\nProperties in data object take precedent over component props"
            },
            "isBase64": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.bool"
                },
                "required": false,
                "description": "Set to true if data.content is a base64 string"
            },
            "isDataURL": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.bool"
                },
                "required": false,
                "description": "Set to true if data.content is a data url"
            },
            "mimeType": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "Default value for mimeType."
            },
            "setProps": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
            }
        }
    },
    "src/lib/components/crystal-toolkit/GraphComponent.react.js": {
        "description": "",
        "displayName": "GraphComponent",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "graph": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "A graph that will be displayed when this component is rendered"
            },
            "options": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Display options for the graph"
            },
            "setProps": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            }
        }
    },
    "src/lib/components/data-display/DataBlock.react.js": {
        "description": "Display a single record of data in a horizontal block element\nwith an optional expanded view to show additional data columns.",
        "displayName": "DataBlock",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class (mpc-data-block)"
            },
            "data": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Object (i.e. dictionary) of data to be displayed in the block"
            },
            "columns": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "Optional configuration for the columns in the data object.\nFollows the same format as the columns prop in the SearchUI component."
            },
            "expanded": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Control the initial expanded state of the block.\n@default false"
            },
            "footer": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Content to display in the bottom section of the card.\nIf you want to put a component in the footer, add it to the children prop instead."
            },
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Content to display in the bottom section of the card.\nAlternativeWill take precedent"
            },
            "iconClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to use for the icon in the top right.\nIf no class is supplied, there will not be an icon."
            },
            "iconTooltip": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optional tooltip to show when hovering over the icon"
            }
        }
    },
    "src/lib/components/data-display/DownloadButton.react.js": {
        "description": "Button for exporting arrays or objects to files",
        "displayName": "DownloadButton",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Use the children prop to set the button content\nThis can be simple text or a component"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class(es) to add to the top-level element of the component\nNote: the class \"mpc-download-button\" is always added"
            },
            "data": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.array | PropTypes.object"
                },
                "required": false,
                "description": "Array or object (list or dictionary) to be downloaded\nIf downloading as csv or xlsx, data must be an array/list"
            },
            "filename": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Name of the file WITHOUT the extension\n(default: \"export\")"
            },
            "filetype": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'json'",
                            "computed": false
                        },
                        {
                            "value": "'csv'",
                            "computed": false
                        },
                        {
                            "value": "'xlsx'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "File type to be downloaded\nThis is also the extension that will be appended to the filename\n(default: \"json\")"
            },
            "tooltip": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optional tooltip to display above the button on hover"
            }
        }
    },
    "src/lib/components/data-display/DownloadDropdown.react.js": {
        "description": "Dropdown for exporting arrays/lists to json, csv, or xlsx files\nThe dropdown options are prepopulated as JSON, CSV, EXCEL\nThis dropdown contains all the classes used in bulma dropdown",
        "displayName": "DownloadButton",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Use the children prop to set the content for the dropdown button label\nThis can be simple text or a component"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class(es) to add to the top-level element of the component\nNote: the classes \"mpc-download-dropdown dropdown is-active\" are already added by default"
            },
            "buttonClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class(es) to add to the button element of the component\nNote: the class \"button\" is already added by default"
            },
            "data": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.array | PropTypes.object"
                },
                "required": false,
                "description": "Array/list to be downloaded"
            },
            "filename": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Name of the file WITHOUT the extension\n(default: \"export\")"
            },
            "tooltip": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optional tooltip to display above the button on hover"
            }
        }
    },
    "src/lib/components/data-display/Formula.react.js": {
        "description": "Render formula strings with proper subscripts.\nNote that this component expects the string to be\na valid formula.",
        "displayName": "Formula",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.function"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class (mpc-formula)"
            },
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Use the children prop to set the content of the formula.\nMust be a simple string."
            }
        }
    },
    "src/lib/components/data-display/Markdown.react.js": {
        "description": "A custom re-worked version of dcc.Markdown.\nUses v6 of react-markdown and applies five plugins\nto the markdown component by default:\n- remark-gfm\n- remark-slug\n- remark-highlight.js\n- remark-math\n- rehype-katex",
        "displayName": "Markdown",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name of the container element"
            },
            "children": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "string"
                        },
                        {
                            "name": "arrayOf",
                            "value": {
                                "name": "string"
                            }
                        }
                    ]
                },
                "required": false,
                "description": "A markdown string (or array of strings) that adhreres to the CommonMark spec"
            },
            "dedent": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Remove matching leading whitespace from all lines.\nLines that are empty, or contain *only* whitespace, are ignored.\nBoth spaces and tab characters are removed, but only if they match;\nwe will not convert tabs to spaces or vice versa."
            },
            "loading_state": {
                "type": {
                    "name": "shape",
                    "value": {
                        "is_loading": {
                            "name": "bool",
                            "description": "Determines if the component is loading or not",
                            "required": false
                        },
                        "prop_name": {
                            "name": "string",
                            "description": "Holds which property is loading",
                            "required": false
                        },
                        "component_name": {
                            "name": "string",
                            "description": "Holds the name of the component that is loading",
                            "required": false
                        }
                    }
                },
                "required": false,
                "description": "Object that holds the loading state object coming from dash-renderer"
            },
            "style": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "User-defined inline styles for the rendered Markdown"
            }
        }
    },
    "src/lib/components/data-display/SearchUI.react.js": {
        "description": "Component for rendering advanced search interfaces for data in an API\nRenders results in a data table alongside a set of filters that map to properties in the data.",
        "displayName": "SearchUI",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "columns": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of column definitions for the results in the SearchUIDataTable\nColumn properties are based on the react-data-table column settings (https://github.com/jbetancur/react-data-table-component#columns)\nThe \"format\" property must match one of these pre-defined strings: \n   \"FIXED_DECIMAL\", \"SIGNIFICANT_FIGURES\", \"FORMULA\", \"LINK\", \"BOOLEAN\", \"SPACEGROUP_SYMBOL\", \"POINTGROUP\"\nThe \"formatArg\" is a special property that is used to make certain formats more specific (e.g. SIGNIFICANT_FIGURES or FIXED_DECIMAL)\nThe \"omit\" property lets you hide certain columns by default\nRead more about columns here: https://github.com/jbetancur/react-data-table-component#columns\ne.g.\n      [\n          {\n            name: 'Material Id',\n            selector: 'task_ids',\n            format: 'LINK', // creates a link using the value in this column\n            formatArg: '/materials/' // prepends this string to the column value in the links href (e.g. href=\"/materials/mp-100\")\n          },\n          {\n            name: 'Formula',\n            selector: 'formula_pretty',\n            format: 'FORMULA',\n            minWidth: '130px' // sets a minimum width for cells in this column\n          },\n          {\n            name: 'Volume',\n            selector: 'volume',\n            format: 'FIXED_DECIMAL',\n            formatArg: 3 // number of decimals to fix to\n            omit: true // hide this column initially\n          },\n          {\n            name: 'Density',\n            selector: 'density',\n            format: 'SIGNIFICANT_FIGURES',\n            formatArg: 4 // number of significant figures to use\n          },\n          {\n            name: 'Is Stable',\n            selector: 'is_stable',\n            format: 'BOOLEAN',\n            formatArg: ['yes', 'no'] // sets display values for truthy and falsy values\n          },\n          {\n            name: 'Energy Above Hull',\n            selector: 'e_above_hull',\n            format: 'FIXED_DECIMAL',\n            formatArg: 2,\n            units: 'meV/atom', // unit label string to show under column header\n            conversionFactor: 1000, // number by which to multiply result values in this columm\n          },\n      ]"
            },
            "filterGroups": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of filter groups and their respective array of filters.\nA filter group is a collapsible section of the filters panel that contains one or more filters.\nA filter is a type of input element that filters the data based on its value.\nFilter \"type\" must be one of the all-caps strings used in the example below.\nFilter \"id\" must be a queryable field\nFilter \"props\" defines how that filter should be rendered. See example for props format based on filter type.\ne.g.\n      [\n        {\n          name: 'Material Definition',\n          collapsed: false,\n          filters: [\n            {\n              name: 'ID',\n              id: 'task_ids',\n              type: 'TEXT_INPUT' // a standard text input box for string values\n            },\n            {\n              name: 'Elements',\n              id: 'elements',\n              type: 'MATERIALS_INPUT', // a text input box and a periodic table synced together for selecting selements\n              props: {\n                field: 'elements' // sets which field the input controls ('elements' or 'formula')\n              }\n            }\n          ]\n        },\n        {\n          name: 'General',\n          collapsed: false,\n          filters: [\n            {\n              name: 'Volume',\n              id: 'volume',\n              type: 'SLIDER', // a dual range slider for setting a min and max value (must have two query params equal to <id>_min and <id>_max)\n              units: 'kg', // (optional) unit label string to show next to filter label\n              conversionFactor: 0.001, // (optional) number by which to multiply filter values for api queries\n              props: {\n                domain: [0, 200] // sets the min and max values of the slider\n              }\n            },\n            {\n              name: 'Stability',\n              id: 'is_stable',\n              type: 'THREE_STATE_BOOLEAN_SELECT', // a dropdown with three values: true, false, or undefined\n              props: {\n                options: [ // a list of options for the dropdwon (must supply only two options, the undefined option is added automatically)\n                  {\n                    label: 'Is stable',\n                    value: true\n                  },\n                  {\n                    label: 'Is not stable',\n                    value: false\n                  }\n                ]\n              }\n            },\n            {\n              name: 'Spacegroup Symbol',\n              id: 'spacegroup_symbol',\n              type: 'SELECT_SPACEGROUP_SYMBOL' // a special dropdown for selecting a space group symbol (options are auto-generated)\n            },\n            {\n              name: 'Spacegroup Number',\n              id: 'spacegroup_number',\n              type: 'SELECT_SPACEGROUP_NUMBER' // a special dropdown for selecting a space group number (options are auto-generated)\n            },\n            {\n              name: 'Crystal System',\n              id: 'crystal_system',\n              type: 'SELECT_CRYSTAL_SYSTEM' // a special dropdown for selecting a crystal system (options are auto-generated)\n            },\n            {\n              name: 'Point Group',\n              id: 'pointgroup',\n              type: 'SELECT_POINTGROUP' // a special dropdown for selecting a point group (options are auto-generated)\n            },\n            {\n              name: 'Color',\n              id: 'color',\n              type: 'SELECT', // a custom single select dropdown with any number of options\n              props: {\n                options: [ // a list of options for the dropdwon\n                  {\n                    label: 'Blue',\n                    value: 'blue'\n                  },\n                  {\n                    label: 'Red',\n                    value: 'red'\n                  },\n                  {\n                    label: 'Yellow',\n                    value: 'yellow'\n                  }\n                ]\n              }\n            },\n          ]\n        }\n      ]"
            },
            "baseUrl": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The base URL to the API that this search UI should query\ne.g. \"https://api.materialsproject.org/search/\""
            },
            "baseUrlParams": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Query params that will be automatically added for every search.\nThis can be used to scope down a SearchUI to a specific subset of a larger endpoint.\n\ne.g.\n      \n      {\n        project: 'open_catalyst_project'\n      }"
            },
            "autocompleteFormulaUrl": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optional URL endpoint for fetching formula autocompletion results\ne.g. \"https://api.materialsproject.org/materials/formula_autocomplete/\""
            },
            "apiKey": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "API key (if needed) that will be used when making queries"
            },
            "resultLabel": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "A noun in singular form to describe what a result represents (default: \"result\")\ne.g. \"material\"\nNote that only some special plural mappings are handled automatically (e.g. battery -> batteries)\nIn all other cases, an \"s\" is appended to resultLabel"
            },
            "hasSearchBar": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Optionally include/exclude the top search bar\n@default true"
            },
            "searchBarTooltip": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally add a help icon with a tooltip in the search bar\nThis should be used to provide instructions on how to use the search bar\ne.g.\n 'Type in a comma-separated list of element symbols (e.g. Ga, N),\n a chemical formula (e.g. C3N), or a material id (e.g. mp-10152).\n You can also click elements on the periodic table to add them to your search.'"
            },
            "searchBarPlaceholder": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally add a string of text to show up in the top-level search bar"
            },
            "searchBarErrorMessage": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Custom error message to display with the top-level search bar\nif the user types an invalid value"
            },
            "searchBarAllowedInputTypesMap": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Object with keys of allowed input types for the top-level search bar.\nKeys must be one of these supported input types: \"elements\", \"formula\", \"mpid\", \"smiles\", \"text\"\nEach key object must have a \"field\" property which maps the input type\nto a valid data filter field in the API.\ne.g.\n      {\n        formula: {\n          field: 'formula'\n        },\n        elements: {\n          field: 'elements'\n        },\n        mpid: {\n          field: 'material_ids'\n        }\n      }"
            },
            "searchBarPeriodicTableMode": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'toggle'",
                            "computed": false
                        },
                        {
                            "value": "'focus'",
                            "computed": false
                        },
                        {
                            "value": "'none'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Modes for showing the periodic table with the top search bar\n\"toggle\": render a button for toggling visibility of periodic table\n\"focus\": show periodic table when input is focuses, hide on blur\n\"none\": never show the periodic table for this input\n@default 'toggle'"
            },
            "hasSortMenu": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Optionally include/exclude the menu for dynamically controlling sort options\n@default true"
            },
            "sortField": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally include a field to sort by on initial load\nMust be a valid field and included in your list of columns"
            },
            "sortAscending": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If including a sortField, set whether it should ascend by default\nTrue for ascending, False for descending"
            },
            "conditionalRowStyles": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "List of conditions for styling rows based on a property (selector) and a value\nAccepts a list of \"condition\" objects which must specify a...\n selector: the name of the data property to use for the condition\n value: the value that meets the condition\n style: object of styles supplied in \"CSS-in-JS\" format\nNote that this prop currently only supports checking for \nvalue equivalence (i.e. row[selector] === value)\nexample:\n      [\n        {\n          selector: \"myProperty\",\n          value: true,\n          style: {\n            backgroundColor: \"#ddd\"\n          }\n        }\n      ]"
            },
            "selectableRows": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to show a checkbox next to each row"
            },
            "selectedRows": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "Array of selected rows.\nThis prop is dynamically updated using setProps\nand can be accessed via dash callback"
            },
            "view": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'table'",
                            "computed": false
                        },
                        {
                            "value": "'cards'",
                            "computed": false
                        },
                        {
                            "value": "'synthesis'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Set the initial results view to one of the preset\nSearchUI views: 'table', 'cards', or 'synthesis'\n\nTo add a new view type, head to SearchUI/types and add the name of the type to the\nSearchUIViewType enum, then add a property in searchUIViewsMap using the same name\nyou used for the type, then provide your custom view component as the value.\nThe view component should consume the SearchUIContext state using the useSearchUIContext hook.\nSee SearchUIDataTable or SearchUIDataCards for example view components.\n@default 'table'"
            },
            "allowViewSwitching": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Optionally enable/disable switching between SearchUI result views"
            },
            "cardOptions": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Set of options for configuring what is displayed in the result cards\nwhen in the cards view.\nMust be an object with the following properties:\n      {\n        imageBaseURL: '', // Base of the URL to use to get images for the left side of the card\n        imageKey: 'material_id', // Data key to use to append value to the base URL (i.e. the name of the image file). The .png extension is added automatically.\n        levelOneKey: 'material_id', // Data key to use for the first line of text on the card\n        levelTwoKey: 'formula_pretty', // Data key to use for the second line of text on the card\n        levelThreeKeys: [ // List of data keys and labels to display under the first and second line of text\n          { key: 'energy_above_hull', label: 'Energy Above Hull' },\n          { key: 'formation_energy_per_atom', label: 'Formation Energy' },\n        ],\n      }"
            },
            "isContribs": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true if displaying data from the MPContribs API.\nThis is a temporary solution to use until mp-api and contribs API have\nconsistent naming standards."
            }
        }
    },
    "src/lib/components/data-display/SynthesisRecipeCard.react.js": {
        "description": "Display synthesis recipe data in a standardized card view.",
        "displayName": "SynthesisRecipeCard",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class (mpc-data-block)"
            },
            "data": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Object (i.e. dictionary) of data to be displayed in the block.\nData should be in the format returned for a single result from the synthesis API endpoint."
            }
        }
    },
    "src/lib/components/data-display/Tooltip.react.js": {
        "description": "Tooltip component based on react-tooltip (https://github.com/wwayne/react-tooltip).\nTo attach a Tooltip component to a trigger element,\nadd the attributes \"data-tip\" and \"data-for\" to the trigger element.\nThe \"data-for\" attribute's value should be equal to the id of the Tooltip\ncomponent you want to connect it to.",
        "displayName": "Tooltip",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.function"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Use the children prop to set the content of the tooltip.\nThis can be simple text or a component"
            },
            "place": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "type": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "effect": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "event": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "eventOff": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "globalEventOff": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "isCapture": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "offset": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": ""
            },
            "multiline": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "html": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "delayHide": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "delayShow": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "delayUpdate": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "border": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "disable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "scrollHide": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "clickable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "src/lib/components/data-entry/GlobalSearchBar.react.js": {
        "description": "Component for rendering advanced search interfaces for data in an API\nRenders results in a data table alongside a set of filters that map to properties in the data.",
        "displayName": "GlobalSearchBar",
        "methods": [],
        "props": {
            "redirectRoute": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The route (minus the query params) that submissions should redirect to"
            },
            "autocompleteFormulaUrl": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optional URL endpoint for fetching formula autocompletion results\ne.g. \"https://api.materialsproject.org/materials/formula_autocomplete/\""
            },
            "apiKey": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "API key (if needed) that will be used to hit the autocomplete route"
            },
            "hidePeriodicTable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Boolean flag for showing/hiding the periodic table on initial load"
            },
            "tooltip": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally add a help icon with a tooltip in the search bar\nThis should be used to provide instructions on how to use the search bar\ne.g.\n 'Type in a comma-separated list of element symbols (e.g. Ga, N),\n a chemical formula (e.g. C3N), or a material id (e.g. mp-10152).\n You can also click elements on the periodic table to add them to your search.'"
            },
            "placeholder": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally add a string of text to show up in the top-level search bar"
            }
        }
    },
    "src/lib/components/data-entry/MaterialsInput.react.js": {
        "description": "An input field component for searching by mp-id, elements, formula, smiles, or text.\nRenders a text input and a periodic table within a PeriodicContext to support two-way binding between the input and periodic table.\ni.e. when elements are typed into the field, they are selected in the table,\nand when elements are selected in the table, they are appended to the field's input.",
        "displayName": "MaterialsInput",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "value": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "inputType": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'elements'",
                            "computed": false
                        },
                        {
                            "value": "'formula'",
                            "computed": false
                        },
                        {
                            "value": "'mpid'",
                            "computed": false
                        },
                        {
                            "value": "'smiles'",
                            "computed": false
                        },
                        {
                            "value": "'text'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "allowedInputTypes": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": ""
            },
            "showInputTypeDropdown": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "isChemSys": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "allowSmiles": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "placeholder": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "errorMessage": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "debounce": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "periodicTableMode": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'toggle'",
                            "computed": false
                        },
                        {
                            "value": "'focus'",
                            "computed": false
                        },
                        {
                            "value": "'none'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "hidePeriodicTable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "autocompleteFormulaUrl": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "autocompleteApiKey": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "tooltip": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "src/lib/components/data-entry/Select.react.js": {
        "description": "Wrapper component for react-select\nThis can be used as an alternative to dcc.Dropdown\nAutomatically adds the wrapper class \"react-select-container\"\nand the class prefix \"react-select-\" to all the elements created by react-select",
        "displayName": "Select",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "options": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "List of objects to be used as options in the dropdown\ne.g.\n        [\n          {\n            'label': 'One',\n            'value': 1\n          },\n          {\n            'label': 'Two',\n            'value': 2\n          }\n        ]"
            },
            "value": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "The value of the select dropdown.\nAccepts either the value itself or the an entire object from the options array.\ne.g. 1 or {'label': 'One', 'value': 1}"
            },
            "defaultValue": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "The default value assigned if no selection is made.\n(default: null)"
            },
            "isClearable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Determines if dropdown has an 'x' icon for\nclearing the current value.\n(default: False)"
            },
            "isMulti": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true if select should allow multiple\noptions to be selected.\n(default: False)"
            },
            "arbitraryProps": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Object for placing all other props that\nare supported by react-select but are not\nexplicitly defined here.\nSee https://react-select.com/props\n\nThis is a workaround because Dash components\ncannot accept props that aren't explicitly defined.\ne.g.\n        {\n          'closeMenuOnSelect': False,\n          'escapeClearsValue': True \n        }"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            }
        }
    },
    "src/lib/components/navigation/Dropdown.react.js": {
        "description": "Generic dropdown menu that can render arbitrary items for display\nand navigation purposes only (i.e. not for selecting options or performing actions that are not links)",
        "displayName": "Dropdown",
        "methods": [],
        "props": {
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Use the children prop to set the dropdown items.\nThis should usually be a list of <div> components with the class \"dropdown-item\".\nThe content of each item can be anything from simple text to a component."
            },
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "triggerLabel": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Text to display in the button that triggers the dropdown to open"
            },
            "triggerClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to apply to button that opens the dropdown menu\n@default 'button'"
            },
            "triggerIcon": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) for the icon to display to the left of the trigger label (optional)"
            },
            "items": {
                "type": {
                    "name": "arrayOf",
                    "value": {
                        "name": "string"
                    }
                },
                "required": false,
                "description": "List of strings to display inside the dropdown menu.\nOmit this and use the children prop instead if you want supply components as dropdown items."
            },
            "isArrowless": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to remove the arrow to the right of the trigger label"
            },
            "isUp": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to make the dropdown menu open upwards"
            },
            "isRight": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to align the dropdown menu with the right of the trigger"
            },
            "closeOnSelection": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to false to keep the menu open when an item is clicked\n@default true"
            }
        }
    },
    "src/lib/components/navigation/Navbar.react.js": {
        "description": "Component for including dropdown menus inside a bulma navbar\nIncludes all of the default bulma classes for a navbar-dropdown",
        "displayName": "Navbar",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extra class name applied to top level navbar-item.\nThe \"navbar\" class is added automatically"
            },
            "items": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of navbar-items to show on the right side of the navbar.\nAn item can be a link, a menu label, or a divider.\nEach item can support the following properties:\n   className: string;\n   label: string (the text to show in the item);\n   href: string (the href value for link items, ignored if item is menu label);\n   target: string (target value to be added to the link);\n   icon: string (class name(s) for an icon to display in the navbar-item);\n   image: string (src attribute of an image to display in the navbar-item);\n   items: array (items to render underneath this item as a dropdown)\n\n     items of items (i.e. dropdown items) can have all the above properties plus the following:\n\n     isDivider: boolean (sets this item as just a horizontal rule with the \"navbar-divider\" class);\n     isMenuLabel: boolean (sets this item as a label with the \"menu-label\" class);\n     items: NavbarItem[];\n\n   isRight: boolean (applies bulma's \"is-right\" class to the navbar-dropdown\n   isArrowless: boolean (Set to true to hide the default angle down arrow created by bulma);\ne.g.\n        [\n          {\n            label: \"API\",\n            href: \"/api\"\n          },\n          {\n            label: \"Help\",\n            href: \"/help\"\n          },\n          {\n            label: \"Apps\",\n            isRight: true,\n            items: [\n              {\n                label: \"Materials\",\n                href: \"/materials\"\n              },\n              {\n                label: \"Molecules\",\n                href: \"/molecules\"\n              },\n              {\n                isDivider: true\n              },\n              {\n                isMenuLabel: true,\n                label: \"Other\"\n              },\n              {\n                label: \"External Site\",\n                href: \"https://externalsite.com\",\n                target: \"_blank\"\n              }\n            ]\n          }\n        ]"
            },
            "brandItem": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Single navbar-item to display on the left of the navbar in the \"navbar-brand\" element.\nExpects an object that can support all the same properties of a navbar-item.\ne.g.\n        {\n          label: \"The Materials Project\",\n          href: \"/\",\n          image: \"/images/brand.png\"\n        },"
            }
        }
    },
    "src/lib/components/navigation/NavbarDropdown.react.js": {
        "description": "Component for including dropdown menus inside a bulma navbar\nIncludes all of the default bulma classes for a navbar-dropdown",
        "displayName": "NavbarDropdown",
        "methods": [],
        "props": {
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Use the children prop to set the dropdown trigger content\nThis can be simple text or a component\nThe trigger will automatically be wrapped with the \"navbar-link\" class"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extra class name applied to top level navbar-item\nThe \"navbar-item\" and \"has-dropdown\" classes are added automatically"
            },
            "isArrowless": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to hide the default angle down arrow created by bulma"
            },
            "isRight": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to apply bulma's \"is-right\" class to the navbar-dropdown\nThis aligns the dropdown menu with the right side of the trigger"
            },
            "items": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of navbar-items to show in the dropdown when hovering over the label.\nAn item can be a link, a menu label, or a divider\nEach item can support the following properties:\n-- text: string (the text to show in the item)\n-- href: string (the href value for link items, ignored if item is menu label)\n-- isMenuLabel: boolean (sets this item as a label with the \"menu-label\" class)\n-- isDivider: boolean (sets this item as just a horizontal rule with the \"navbar-divider\" class)\n-- openInNewTab: boolean (will open link in a new tab, only works if href is a full url)\ne.g.\n        [\n          {\n            text: \"Materials\",\n            href: \"/materials\"\n          },\n          {\n            text: \"Molecules\",\n            href: \"/molecules\"\n          },\n          {\n            isDivider: true\n          },\n          {\n            isMenuLabel: true,\n            text: \"Other\"\n          },\n          {\n            text: \"External Site\",\n            href: \"https://externalsite.com\",\n            openInNewTab: true\n          }\n        ]"
            }
        }
    },
    "src/lib/components/navigation/Scrollspy.react.js": {
        "description": "Component for building in-page navigation menus with scrollspy functionality",
        "displayName": "Scrollspy",
        "methods": [],
        "props": {
            "menuGroups": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of MenuGroup items that is used to build the menu and its links.\nEach MenuGroup has an optional label and a required 'items' array of MenuItems.\nEach MenuItem has a label that is rendered in the menu and a targetId that is the id of the element it should link to.\nDo not include '#' in targetId.\nexample:\n      [\n        {label: '...', items: [\n          {label: '...', targetId: '...'}, \n          {label: '...', targetId: '...', items: [\n            {label: '...', targetId: '...'}\n          }]\n        ]}\n      ]"
            },
            "activeClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to active links in the menu (default: 'is-active')"
            },
            "menuClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to the <aside> that contains the whole menu (default: 'menu')"
            },
            "menuGroupLabelClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to all menu group labels (default: 'menu-label')"
            },
            "menuItemContainerClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to each <ul> of menu items (default: 'menu-list')"
            },
            "menuItemClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to the <li> of each menu item (default: '')"
            },
            "offset": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "An integer to determine the scroll offset from an item that will trigger it active (default: -20)"
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicContext.react.js": {
        "description": "",
        "displayName": "MpPeriodicContext",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": ""
            },
            "disabledElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of symbols to grey-out as disabled"
            },
            "enabledElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of selected symbols"
            },
            "hiddenElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of hidden symbols"
            },
            "forwardOuterChange": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Forward external changes"
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicContextTable.react.js": {
        "description": "",
        "displayName": "MpPeriodicContextTable",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": ""
            },
            "disabledElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of symbols to grey-out as disabled"
            },
            "enabledElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of selected symbols"
            },
            "hiddenElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of hidden symbols"
            },
            "forwardOuterChange": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Forward external changes"
            },
            "forceTableLayout": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Force table layout"
            },
            "maxElementSelectable": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "The maximum number of selectable elements"
            },
            "state": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "The state of the table, as exposed in the dash callback"
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicElement.react.js": {
        "description": "This component displays a periodic element",
        "displayName": "MpPeriodicElement",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "size": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "element": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicFilter.react.js": {
        "description": "This component filter an associated periodic table",
        "displayName": "MpPeriodicFilter",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicTableInput.react.js": {
        "description": "MpPeriodicTableInput is a component that allows user to select\nsome components from a periodic table",
        "displayName": "MpPeriodicTableInput",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks."
            },
            "state": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "This is a read-only prop that dash callback can subscribe to"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
            },
            "maxElementSelectable": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "Maximum number of selectable elements",
                "defaultValue": {
                    "value": "10",
                    "computed": false
                }
            },
            "forceTableLayout": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'spaced'",
                            "computed": false
                        },
                        {
                            "value": "'compact'",
                            "computed": false
                        },
                        {
                            "value": "'small'",
                            "computed": false
                        },
                        {
                            "value": "'map'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Force the table to be in a specific layout"
            }
        }
    },
    "src/lib/components/publications/BibCard.react.js": {
        "description": "Render bibliographic information in a formatted card view",
        "displayName": "BibCard",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class (mpc-bib-card)"
            },
            "title": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Title of the reference\nWill render as a link if doi is supplied"
            },
            "author": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Authors of the reference\nThis string will render as is, so any formatting must be done beforehand"
            },
            "year": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.oneOfType[(PropTypes.string, PropTypes.number)]"
                },
                "required": false,
                "description": "Year of the reference as either a string or number"
            },
            "journal": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Name of the journal or publisher of the reference"
            },
            "doi": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The DOI (Digital Object Identifier) of the reference\nThis identifier is used to generate links to the reference's\nonline publication, open access PDF, and bibtex"
            },
            "preventOpenAccessFetch": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to prevent dynamically fetching a link to a free PDF of\neach reference (using the \"doi\" field for individual bib entry).\nNOTE: the open access URL can also be included in a bib entry\nin the \"openAccessUrl\" property. If set, the URL will not be fetched.\n@default false"
            },
            "openAccessUrl": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Directly supply the URL to an accessible PDF of the reference\nIf supplied, the component will not try to fetch an open access URL\n@default undefined"
            }
        }
    },
    "src/lib/components/publications/BibFilter.react.js": {
        "description": "Component for rendering and filtering a list of citations in bibjson or crossref format\nExpects bibjson in the format output by the bibtexparser library (https://bibtexparser.readthedocs.io/en/v1.1.0/tutorial.html#)\nExpects crossref in the format returned by the Crossref API",
        "displayName": "BibFilter",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class (mpc-bib-filter)"
            },
            "format": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'bibjson'",
                            "computed": false
                        },
                        {
                            "value": "'crossref'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Format of the bibliographoc objects supplied in bibEntries\n@default 'bibjson'"
            },
            "bibEntries": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "List of bib objects in bibjson or crossref format\nOnly the following bib properties are used by this component:\n - title\n - author (as a list or string)\n - year\n - doi\n - journal\nIf any of those properties are missing, that property will be omitted from the bibjson result card.\nAny extra properties are simply ignored."
            },
            "sortField": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'year'",
                            "computed": false
                        },
                        {
                            "value": "'author'",
                            "computed": false
                        },
                        {
                            "value": "'title'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Name of property to initially sort entries by\n@default 'year'"
            },
            "ascending": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to have the initial sorting direction be ascending\n@default false"
            },
            "resultClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to individual result cards' default class (mpc-bib-card)"
            },
            "preventOpenAccessFetch": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to prevent dynamically fetching a link to a free PDF of\neach reference (using the \"doi\" field for individual bib entry).\nNOTE: the open access URL can also be included in a bib entry\nin the \"openAccessUrl\" property. If set, the URL will not be fetched.\n@default false"
            }
        }
    },
    "src/lib/components/publications/BibjsonCard.react.js": {
        "description": "Parses a bibjson entry and renders a BibCard\nExpects bibjsonEntry in the format used by the bibtexparser library (https://bibtexparser.readthedocs.io/en/v1.1.0/tutorial.html#)",
        "displayName": "BibjsonCard",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class"
            },
            "bibjsonEntry": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "A single bib object in bibjson format\nOnly the following bib properties are used by this component: title, author (as a list or string), year, doi, journal.\nIf any of those properties are missing, that property will be omitted from the bibjson result card.\nAny extra properties are simply ignored.\ne.g.\n      {\n        \"journal\": \"Physical Review X\",\n        \"year\": \"2015\",\n        \"issn\": \"21603308\",\n        \"isbn\": \"2160-3308\",\n        \"doi\": \"10.1103/PhysRevX.5.011006\",\n        \"author\": [\"Agapito, Luis A.\", \"Curtarolo, Stefano\", \"Nardelli, Marco Buongiorno\"],\n        \"title\": \"Reformulation of DFT + U as a Pseudohybrid Hubbard Density Functional for Accelerated Materials Discovery\",\n        \"ENTRYTYPE\": \"article\",\n        \"ID\": \"agapito2015\"\n      }"
            },
            "preventOpenAccessFetch": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to prevent dynamically fetching a link to a free PDF of\neach reference (using the \"doi\" field for individual bib entry).\nNOTE: the open access URL can also be included in a bib entry\nin the \"openAccessUrl\" property. If set, the URL will not be fetched.\n@default false"
            }
        }
    },
    "src/lib/components/publications/BibtexButton.react.js": {
        "description": "Standardized button for linking to BibTeX.\nIf no url prop is supplied, a link will be generated\nusing the doi prop and doi2bib.org.",
        "displayName": "BibtexButton",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class (mpc-bibtex-button)\n@default 'button is-small'"
            },
            "doi": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The DOI (Digital Object Identifier) of the reference\nto pass to doi2bib.org."
            },
            "url": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Directly supply the URL to a reference's bibtex.\nIf supplied, the component will not generate its own link using the doi prop."
            },
            "target": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Value to add to the anchor tag's target attribute\n@default '_blank'"
            }
        }
    },
    "src/lib/components/publications/CrossrefCard.react.js": {
        "description": "Parses a crossref entry or fetches a reference from the crossref API and renders a BibCard.",
        "displayName": "CrossrefCard",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class"
            },
            "crossrefEntry": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "A single bib object in crossref format.\nIf a crossEntry is supplied, a request will not be made to the crossref API.\nThe following bib values are parsed from a Crossref API response: title, authors, year, doi, journal."
            },
            "identifier": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Either a DOI or bibtex string to use to search against the Crossref /works endpoint.\nAn identifier must be supplied if you are not supplying the crossrefEntry directly."
            },
            "errorMessage": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Error message to show inside the card if the crossref request fails\n@default 'Could not find reference'"
            },
            "preventOpenAccessFetch": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to prevent dynamically fetching a link to a free PDF of\neach reference (using the \"doi\" field for individual bib entry).\nNOTE: the open access URL can also be included in a bib entry\nin the \"openAccessUrl\" property. If set, the URL will not be fetched.\n@default false"
            }
        }
    },
    "src/lib/components/publications/PublicationButton.react.js": {
        "description": "Standardized button for linking to a publication.\nIf a doi prop or doi.org link is supplied, an open access link\nwill also be generated next to the publication link.",
        "displayName": "PublicationButton",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "doi": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The DOI (Digital Object Identifier) of the publication\nWill be used to generate a doi.org link and to fetch an open access PDF link."
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name(s) to append to the component's default class (mpc-open-access-button).\nNote: the \"tag\" class is the default value for className.\nIf you don't want the top-level element to have the \"tag\" class, add className=\"\" or any other value.\nIf you want to use a bulma tag modifier, use the tagClassName prop instead.\n@default 'tag'"
            },
            "tagClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Customize the tag using bulma's tag classes\nThese class names will be appended to all of the component's \"tag\" elements"
            },
            "url": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Directly supply the URL to the publication.\nIf a doi.org url is supplied, this component will automatically\nparse the url for the doi and use that to fetch an open access link."
            },
            "openAccessUrl": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Directly supply the URL to an openly accessible PDF of the reference.\nIf supplied, the component will not try to fetch an open access URL."
            },
            "preventOpenAccessFetch": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to prevent any requests to the open access api.\nNote that if you supply your own openAccessUrl, this prop is not necessary."
            },
            "target": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Value to add to the anchor tag's target attribute\n@default '_blank'"
            }
        }
    }
}
