{
    "src/lib/components/JsonView.react.js": {
        "description": "",
        "displayName": "JsonView",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "src": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": ""
            },
            "name": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "bool"
                        },
                        {
                            "name": "string"
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "theme": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "style": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": ""
            },
            "iconStyle": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "indentWidth": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "collapsed": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "bool"
                        },
                        {
                            "name": "number"
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "collapseStringsAfterLength": {
                "type": {
                    "name": "union",
                    "value": [
                        {
                            "name": "bool"
                        },
                        {
                            "name": "number"
                        }
                    ]
                },
                "required": false,
                "description": ""
            },
            "groupArraysAfterLength": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "enableClipboard": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "displayObjectSize": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "displayDataTypes": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "defaultValue": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": ""
            },
            "sortKeys": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "validationMessage": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            }
        }
    },
    "src/lib/components/MatSidebar.react.js": {
        "description": "Material navigation bar",
        "displayName": "MatSidebar",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks."
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
            },
            "currentApp": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID of the current selected app"
            },
            "appId": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "This is a read-only prop that dash callback can subscribe to"
            },
            "layout": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'vertical'",
                            "computed": false
                        },
                        {
                            "value": "'horizontal'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "The layout of the sidebar"
            }
        }
    },
    "src/lib/components/crystal-toolkit/CameraContextProvider.react.js": {
        "description": "Use this component to synchronize the camera of multiple\n SimpleSceneComponent",
        "displayName": "CameraContextProvider",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "children": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.any"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "src/lib/components/crystal-toolkit/CrystalToolkitScene.react.js": {
        "description": "",
        "displayName": "CrystalToolkitScene",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "data": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Simple3DScene JSON, the easiest way to generate this is to use the Scene class\nin crystal_toolkit.core.scene and its to_json method."
            },
            "settings": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Options used for generating scene.\nSupported options and their defaults are given as follows:\n{\n   antialias: true, // set to false to improve performance\n   renderer: 'webgl', // 'svg' also an option, used for unit testing\n   transparentBackground: false, // transparent background\n   background: '#ffffff', // background color if not transparent,\n   sphereSegments: 32, // decrease to improve performance\n   cylinderSegments: 16, // decrease to improve performance\n   staticScene: true, // disable if animation required\n   defaultZoom: 1, // 1 will zoom to fit object exactly, <1 will add padding between object and box bounds\n   zoomToFit2D: false // if true, will zoom to fit object only along the X and Y axes (not Z)\n   extractAxis: false // will remove the axis from the main scene\n   isMultiSelectionEnabled: false // allow to use shift to select,\n   secondaryObjectView: true // show the selected object in a detail view\n   animation: 'play' | 'slider' | 'none' // choose which style of animation is use\n}\nThere are several additional options used for debugging and testing,\nplease consult the source code directly for these."
            },
            "toggleVisibility": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Hide/show nodes in scene by its name (key), value is 1 to show the node\nand 0 to hide it."
            },
            "imageRequest": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Set to trigger a screenshot or scene download.\nMust be an object with the following structure:\n{\n   \"filetype\": \"png\" // the image format (\"png\", \"dae\")\n}\nPassing this prop as an object ensures that\nnew requests are triggered any time the prop\nis set."
            },
            "imageData": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "THIS PROP IS SET AUTOMATICALLY\nData string for the image generated by imageRequest\nThis string can be downloaded as the filetype specified in your imageRequest object"
            },
            "imageDataTimestamp": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.number"
                },
                "required": false,
                "description": "THIS PROP IS SET AUTOMATICALLY\nDate string that represents the time imageData was set.\nThis is to prevent race conditions between imageRequest and imageData\nwhen being used in dash callbacks."
            },
            "setProps": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            },
            "selectedObject": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.array"
                },
                "required": false,
                "description": "This points to the last clicked objects. Use it in your dash callback\nto know which objects are currently selected in the scene"
            },
            "sceneSize": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.oneOfType([PropTypes.number, PropTypes.string])"
                },
                "required": false,
                "description": "Width / Height of the displayed component"
            },
            "axisView": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "Where is the axis displayed ( 'NW' / 'NE' / 'SE' / 'SW' / 'HIDDEN' )"
            },
            "inletSize": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.number"
                },
                "required": false,
                "description": "Size of the axis view"
            },
            "inletPadding": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.number"
                },
                "required": false,
                "description": "Padding of the axis view"
            },
            "debug": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.bool"
                },
                "required": false,
                "description": "Display a debug view"
            },
            "animation": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "Animation type"
            },
            "currentCameraState": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "THIS PROP IS SET AUTOMATICALLY\nObject that maintains the current state of the camera.\ne.g.\n{\n  position: {x: 0, y: 0, z: 0},\n  quarternion: {x: 0, y: 0, z: 0, w: 0},\n  zoom: 1,\n  setByComponentId: \"1\",\n  following: true\n}"
            },
            "customCameraState": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Object for setting the scene to a custom camera state.\nWhen modified, the camera will update to new custom state.\ne.g.\n{\n  position: {x: 0, y: 0, z: 0},\n  quarternion: {x: 0, y: 0, z: 0, w: 0}, (optional)\n  zoom: 1 (optional)\n}"
            }
        }
    },
    "src/lib/components/crystal-toolkit/Download.react.js": {
        "description": "",
        "displayName": "Download",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks."
            },
            "data": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "When set, a download is invoked using a Blob.\nAccepts an object with the following structure:\n      {\n        filename: string;\n        content: any;\n        isBase64: boolean (optional);\n        isDataURL: boolean (optional);\n        mimeType: string (optional, default: 'text/plan');\n      }\nProperties in data object take precedent over component props"
            },
            "isBase64": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.bool"
                },
                "required": false,
                "description": "Set to true if data.content is a base64 string"
            },
            "isDataURL": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.bool"
                },
                "required": false,
                "description": "Set to true if data.content is a data url"
            },
            "mimeType": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "Default value for mimeType."
            },
            "setProps": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
            }
        }
    },
    "src/lib/components/crystal-toolkit/GraphComponent.react.js": {
        "description": "",
        "displayName": "GraphComponent",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "graph": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "A graph that will be displayed when this component is rendered"
            },
            "options": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.object"
                },
                "required": false,
                "description": "Display options for the graph"
            },
            "setProps": {
                "type": {
                    "name": "custom",
                    "raw": "PropTypes.func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            }
        }
    },
    "src/lib/components/navigation/NavbarDropdown.react.js": {
        "description": "Component for including dropdown menus inside a bulma navbar\nIncludes all of the default bulma classes for a navbar-dropdown",
        "displayName": "NavbarDropdown",
        "methods": [],
        "props": {
            "children": {
                "type": {
                    "name": "node"
                },
                "required": false,
                "description": "Use the children prop to set the dropdown trigger content\nThis can be simple text or a component\nThe trigger will automatically be wrapped with the \"navbar-link\" class"
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extra class name applied to top level navbar-item\nThe \"navbar-item\" and \"has-dropdown\" classes are added automatically"
            },
            "isArrowless": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to hide the default angle down arrow created by bulma"
            },
            "isRight": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true to apply bulma's \"is-right\" class to the navbar-dropdown\nThis aligns the dropdown menu with the right side of the trigger"
            },
            "items": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of navbar-items to show in the dropdown when hovering over the label.\nAn item can be a link, a menu label, or a divider\nEach item can support the following properties:\n-- text: string (the text to show in the item)\n-- href: string (the href value for link items, ignored if item is menu label)\n-- isMenuLabel: boolean (sets this item as a label with the \"menu-label\" class)\n-- isDivider: boolean (sets this item as just a horizontal rule with the \"navbar-divider\" class)\n-- openInNewTab: boolean (will open link in a new tab, only works if href is a full url)\ne.g.\n        [\n          {\n            text: \"Materials\",\n            href: \"/materials\"\n          },\n          {\n            text: \"Molecules\",\n            href: \"/molecules\"\n          },\n          {\n            isDivider: true\n          },\n          {\n            isMenuLabel: true,\n            text: \"Other\"\n          },\n          {\n            text: \"External Site\",\n            href: \"https://externalsite.com\",\n            openInNewTab: true\n          }\n        ]"
            }
        }
    },
    "src/lib/components/navigation/Scrollspy.react.js": {
        "description": "Component for building in-page navigation menus with scrollspy functionality",
        "displayName": "Scrollspy",
        "methods": [],
        "props": {
            "menuGroups": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of MenuGroup items that is used to build the menu and its links.\nEach MenuGroup has an optional label and a required 'items' array of MenuItems.\nEach MenuItem has a label that is rendered in the menu and a targetId that is the id of the element it should link to.\nDo not include '#' in targetId.\nexample:\n      [\n        {label: '...', items: [\n          {label: '...', targetId: '...'}, \n          {label: '...', targetId: '...', items: [\n            {label: '...', targetId: '...'}\n          }]\n        ]}\n      ]"
            },
            "activeClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to active links in the menu (default: 'is-active')"
            },
            "menuClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to the <aside> that contains the whole menu (default: 'menu')"
            },
            "menuGroupLabelClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to all menu group labels (default: 'menu-label')"
            },
            "menuItemContainerClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to each <ul> of menu items (default: 'menu-list')"
            },
            "menuItemClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Class name applied to the <li> of each menu item (default: '')"
            },
            "offset": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "An integer to determine the scroll offset from an item that will trigger it active (default: -20)"
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicContext.react.js": {
        "description": "",
        "displayName": "MpPeriodicContext",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": ""
            },
            "disabledElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of symbols to grey-out as disabled"
            },
            "enabledElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of selected symbols"
            },
            "hiddenElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of hidden symbols"
            },
            "forwardOuterChange": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Forward external changes"
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicContextTable.react.js": {
        "description": "",
        "displayName": "MpPeriodicContextTable",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": ""
            },
            "disabledElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of symbols to grey-out as disabled"
            },
            "enabledElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of selected symbols"
            },
            "hiddenElements": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "A list of hidden symbols"
            },
            "forwardOuterChange": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Forward external changes"
            },
            "forceTableLayout": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Force table layout"
            },
            "maxElementSelectable": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "The maximum number of selectable elements"
            },
            "state": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "The state of the table, as exposed in the dash callback"
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicElement.react.js": {
        "description": "This component displays a periodic element",
        "displayName": "MpPeriodicElement",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "size": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": ""
            },
            "element": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicFilter.react.js": {
        "description": "This component filter an associated periodic table",
        "displayName": "MpPeriodicFilter",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            }
        }
    },
    "src/lib/components/periodic-table/PeriodicTableInput.react.js": {
        "description": "MpPeriodicTableInput is a component that allows user to select\nsome components from a periodic table",
        "displayName": "MpPeriodicTableInput",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks."
            },
            "state": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "This is a read-only prop that dash callback can subscribe to"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
            },
            "maxElementSelectable": {
                "type": {
                    "name": "number"
                },
                "required": false,
                "description": "Maximum number of selectable elements",
                "defaultValue": {
                    "value": "10",
                    "computed": false
                }
            },
            "forceTableLayout": {
                "type": {
                    "name": "enum",
                    "value": [
                        {
                            "value": "'spaced'",
                            "computed": false
                        },
                        {
                            "value": "'compact'",
                            "computed": false
                        },
                        {
                            "value": "'small'",
                            "computed": false
                        },
                        {
                            "value": "'map'",
                            "computed": false
                        }
                    ]
                },
                "required": false,
                "description": "Force the table to be in a specific layout"
            }
        }
    },
    "src/lib/components/search/GlobalSearchBar.react.js": {
        "description": "Component for rendering advanced search interfaces for data in an API\nRenders results in a data table alongside a set of filters that map to properties in the data.",
        "displayName": "GlobalSearchBar",
        "methods": [],
        "props": {
            "redirectRoute": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The route (minus the query params) that submissions should redirect to"
            },
            "autocompleteFormulaUrl": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optional URL endpoint for fetching formula autocompletion results\ne.g. \"https://api.materialsproject.org/materials/formula_autocomplete/\""
            },
            "apiKey": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "API key (if needed) that will be used to hit the autocomplete route"
            },
            "hidePeriodicTable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Boolean flag for showing/hiding the periodic table on initial load"
            },
            "tooltip": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally add a help icon with a tooltip in the search bar\nThis should be used to provide instructions on how to use the search bar\ne.g.\n 'Type in a comma-separated list of element symbols (e.g. Ga, N),\n a chemical formula (e.g. C3N), or a material id (e.g. mp-10152).\n You can also click elements on the periodic table to add them to your search.'"
            },
            "placeholder": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally add a string of text to show up in the top-level search bar"
            }
        }
    },
    "src/lib/components/search/SearchUI.react.js": {
        "description": "Component for rendering advanced search interfaces for data in an API\nRenders results in a data table alongside a set of filters that map to properties in the data.",
        "displayName": "SearchUI",
        "methods": [],
        "props": {
            "columns": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of column definitions for the results in the SearchUIDataTable\nColumn properties are based on the react-data-table column settings (https://github.com/jbetancur/react-data-table-component#columns)\nThe \"format\" property must match one of these pre-defined strings: \n   \"FIXED_DECIMAL\", \"SIGNIFICANT_FIGURES\", \"FORMULA\", \"LINK\", \"BOOLEAN\", \"SPACEGROUP_SYMBOL\", \"POINTGROUP\"\nThe \"formatArg\" is a special property that is used to make certain formats more specific (e.g. SIGNIFICANT_FIGURES or FIXED_DECIMAL)\nThe \"omit\" property lets you hide certain columns by default\nRead more about columns here: https://github.com/jbetancur/react-data-table-component#columns\ne.g.\n      [\n          {\n            name: 'Material Id',\n            selector: 'task_ids',\n            format: 'LINK', // creates a link using the value in this column\n            formatArg: '/materials/' // prepends this string to the column value in the links href (e.g. href=\"/materials/mp-100\")\n          },\n          {\n            name: 'Formula',\n            selector: 'formula_pretty',\n            format: 'FORMULA',\n            minWidth: '130px' // sets a minimum width for cells in this column\n          },\n          {\n            name: 'Volume',\n            selector: 'volume',\n            format: 'FIXED_DECIMAL',\n            formatArg: 3 // number of decimals to fix to\n            omit: true // hide this column initially\n          },\n          {\n            name: 'Density',\n            selector: 'density',\n            format: 'SIGNIFICANT_FIGURES',\n            formatArg: 4 // number of significant figures to use\n          },\n          {\n            name: 'Is Stable',\n            selector: 'is_stable',\n            format: 'BOOLEAN',\n            formatArg: ['yes', 'no'] // sets display values for truthy and falsy values\n          },\n          {\n            name: 'Energy Above Hull',\n            selector: 'e_above_hull',\n            format: 'FIXED_DECIMAL',\n            formatArg: 2,\n            units: 'meV/atom', // unit label string to show under column header\n            conversionFactor: 1000, // number by which to multiply result values in this columm\n          },\n      ]"
            },
            "filterGroups": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "An array of filter groups and their respective array of filters.\nA filter group is a collapsible section of the filters panel that contains one or more filters.\nA filter is a type of input element that filters the data based on its value.\nFilter \"type\" must be one of the all-caps strings used in the example below.\nFilter \"id\" must be a queryable field\nFilter \"props\" defines how that filter should be rendered. See example for props format based on filter type.\ne.g.\n      [\n        {\n          name: 'Material Definition',\n          collapsed: false,\n          filters: [\n            {\n              name: 'ID',\n              id: 'task_ids',\n              type: 'TEXT_INPUT' // a standard text input box for string values\n            },\n            {\n              name: 'Elements',\n              id: 'elements',\n              type: 'MATERIALS_INPUT', // a text input box and a periodic table synced together for selecting selements\n              props: {\n                field: 'elements' // sets which field the input controls ('elements' or 'formula')\n              }\n            }\n          ]\n        },\n        {\n          name: 'General',\n          collapsed: false,\n          filters: [\n            {\n              name: 'Volume',\n              id: 'volume',\n              type: 'SLIDER', // a dual range slider for setting a min and max value (must have two query params equal to <id>_min and <id>_max)\n              units: 'kg', // (optional) unit label string to show next to filter label\n              conversionFactor: 0.001, // (optional) number by which to multiply filter values for api queries\n              props: {\n                domain: [0, 200] // sets the min and max values of the slider\n              }\n            },\n            {\n              name: 'Stability',\n              id: 'is_stable',\n              type: 'THREE_STATE_BOOLEAN_SELECT', // a dropdown with three values: true, false, or undefined\n              props: {\n                options: [ // a list of options for the dropdwon (must supply only two options, the undefined option is added automatically)\n                  {\n                    label: 'Is stable',\n                    value: true\n                  },\n                  {\n                    label: 'Is not stable',\n                    value: false\n                  }\n                ]\n              }\n            },\n            {\n              name: 'Spacegroup Symbol',\n              id: 'spacegroup_symbol',\n              type: 'SELECT_SPACEGROUP_SYMBOL' // a special dropdown for selecting a space group symbol (options are auto-generated)\n            },\n            {\n              name: 'Spacegroup Number',\n              id: 'spacegroup_number',\n              type: 'SELECT_SPACEGROUP_NUMBER' // a special dropdown for selecting a space group number (options are auto-generated)\n            },\n            {\n              name: 'Crystal System',\n              id: 'crystal_system',\n              type: 'SELECT_CRYSTAL_SYSTEM' // a special dropdown for selecting a crystal system (options are auto-generated)\n            },\n            {\n              name: 'Point Group',\n              id: 'pointgroup',\n              type: 'SELECT_POINTGROUP' // a special dropdown for selecting a point group (options are auto-generated)\n            },\n            {\n              name: 'Color',\n              id: 'color',\n              type: 'SELECT', // a custom single select dropdown with any number of options\n              props: {\n                options: [ // a list of options for the dropdwon\n                  {\n                    label: 'Blue',\n                    value: 'blue'\n                  },\n                  {\n                    label: 'Red',\n                    value: 'red'\n                  },\n                  {\n                    label: 'Yellow',\n                    value: 'yellow'\n                  }\n                ]\n              }\n            },\n          ]\n        }\n      ]"
            },
            "baseURL": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The base URL to the API that this search UI should query\ne.g. \"https://api.materialsproject.org/search/\""
            },
            "autocompleteFormulaUrl": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optional URL endpoint for fetching formula autocompletion results\ne.g. \"https://api.materialsproject.org/materials/formula_autocomplete/\""
            },
            "apiKey": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "API key (if needed) that will be used when making queries"
            },
            "resultLabel": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "A noun in singular form to describe what a result represents (default: \"result\")\ne.g. \"material\"\nNote that only some special plural mappings are handled automatically (e.g. battery -> batteries)\nIn all other cases, an \"s\" is appended to resultLabel"
            },
            "searchBarTooltip": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally add a help icon with a tooltip in the search bar\nThis should be used to provide instructions on how to use the search bar\ne.g.\n 'Type in a comma-separated list of element symbols (e.g. Ga, N),\n a chemical formula (e.g. C3N), or a material id (e.g. mp-10152).\n You can also click elements on the periodic table to add them to your search.'"
            },
            "searchBarPlaceholder": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally add a string of text to show up in the top-level search bar"
            },
            "sortField": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Optionally include a field to sort by on initial load\nMust be a valid field and included in your list of columns"
            },
            "sortAscending": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "If including a sortField, set whether it should ascend by default\nTrue for ascending, False for descending"
            }
        }
    },
    "src/lib/components/search/Select.react.js": {
        "description": "Wrapper component for react-select\nThis can be used as an alternative to dcc.Dropdown\nAutomatically adds the wrapper class \"react-select-container\"\nand the class prefix \"react-select-\" to all the elements created by react-select",
        "displayName": "Select",
        "methods": [],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "The ID used to identify this component in Dash callbacks"
            },
            "options": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "List of objects to be used as options in the dropdown\ne.g.\n        [\n          {\n            'label': 'One',\n            'value': 1\n          },\n          {\n            'label': 'Two',\n            'value': 2\n          }\n        ]"
            },
            "value": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "The value of the select dropdown.\nAccepts either the value itself or the an entire object from the options array.\ne.g. 1 or {'label': 'One', 'value': 1}"
            },
            "defaultValue": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "The default value assigned if no selection is made.\n(default: null)"
            },
            "isClearable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Determines if dropdown has an 'x' icon for\nclearing the current value.\n(default: False)"
            },
            "isMulti": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set to true if select should allow multiple\noptions to be selected.\n(default: False)"
            },
            "arbitraryProps": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Object for placing all other props that\nare supported by react-select but are not\nexplicitly defined here.\nSee https://react-select.com/props\n\nThis is a workaround because Dash components\ncannot accept props that aren't explicitly defined.\ne.g.\n        {\n          'closeMenuOnSelect': False,\n          'escapeClearsValue': True \n        }"
            },
            "setProps": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
            }
        }
    }
}
